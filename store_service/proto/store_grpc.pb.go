// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: store.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Store_SetStore_FullMethodName         = "/proto.Store/SetStore"
	Store_GetStore_FullMethodName         = "/proto.Store/GetStore"
	Store_BatchGetStore_FullMethodName    = "/proto.Store/BatchGetStore"
	Store_ReduceStore_FullMethodName      = "/proto.Store/ReduceStore"
	Store_BatchReduceStore_FullMethodName = "/proto.Store/BatchReduceStore"
	Store_RollbackStore_FullMethodName    = "/proto.Store/RollbackStore"
)

// StoreClient is the client API for Store service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreClient interface {
	// 设置库存数
	SetStore(ctx context.Context, in *GoodsStoreInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// 获取库存数
	GetStore(ctx context.Context, in *GoodsStoreInfo, opts ...grpc.CallOption) (*GoodsStoreInfo, error)
	// 批量获取库存数
	BatchGetStore(ctx context.Context, in *GoodsListStore, opts ...grpc.CallOption) (*GoodsListStore, error)
	// 扣减库存数
	ReduceStore(ctx context.Context, in *GoodsStoreInfo, opts ...grpc.CallOption) (*GoodsStoreInfo, error)
	// 批量扣减库存
	BatchReduceStore(ctx context.Context, in *GoodsListStore, opts ...grpc.CallOption) (*GoodsListStore, error)
	// 回滚库存
	RollbackStore(ctx context.Context, in *GoodsListStore, opts ...grpc.CallOption) (*BaseResp, error)
}

type storeClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreClient(cc grpc.ClientConnInterface) StoreClient {
	return &storeClient{cc}
}

func (c *storeClient) SetStore(ctx context.Context, in *GoodsStoreInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Store_SetStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetStore(ctx context.Context, in *GoodsStoreInfo, opts ...grpc.CallOption) (*GoodsStoreInfo, error) {
	out := new(GoodsStoreInfo)
	err := c.cc.Invoke(ctx, Store_GetStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) BatchGetStore(ctx context.Context, in *GoodsListStore, opts ...grpc.CallOption) (*GoodsListStore, error) {
	out := new(GoodsListStore)
	err := c.cc.Invoke(ctx, Store_BatchGetStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) ReduceStore(ctx context.Context, in *GoodsStoreInfo, opts ...grpc.CallOption) (*GoodsStoreInfo, error) {
	out := new(GoodsStoreInfo)
	err := c.cc.Invoke(ctx, Store_ReduceStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) BatchReduceStore(ctx context.Context, in *GoodsListStore, opts ...grpc.CallOption) (*GoodsListStore, error) {
	out := new(GoodsListStore)
	err := c.cc.Invoke(ctx, Store_BatchReduceStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) RollbackStore(ctx context.Context, in *GoodsListStore, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Store_RollbackStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreServer is the server API for Store service.
// All implementations must embed UnimplementedStoreServer
// for forward compatibility
type StoreServer interface {
	// 设置库存数
	SetStore(context.Context, *GoodsStoreInfo) (*BaseResp, error)
	// 获取库存数
	GetStore(context.Context, *GoodsStoreInfo) (*GoodsStoreInfo, error)
	// 批量获取库存数
	BatchGetStore(context.Context, *GoodsListStore) (*GoodsListStore, error)
	// 扣减库存数
	ReduceStore(context.Context, *GoodsStoreInfo) (*GoodsStoreInfo, error)
	// 批量扣减库存
	BatchReduceStore(context.Context, *GoodsListStore) (*GoodsListStore, error)
	// 回滚库存
	RollbackStore(context.Context, *GoodsListStore) (*BaseResp, error)
	mustEmbedUnimplementedStoreServer()
}

// UnimplementedStoreServer must be embedded to have forward compatible implementations.
type UnimplementedStoreServer struct {
}

func (UnimplementedStoreServer) SetStore(context.Context, *GoodsStoreInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStore not implemented")
}
func (UnimplementedStoreServer) GetStore(context.Context, *GoodsStoreInfo) (*GoodsStoreInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStore not implemented")
}
func (UnimplementedStoreServer) BatchGetStore(context.Context, *GoodsListStore) (*GoodsListStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetStore not implemented")
}
func (UnimplementedStoreServer) ReduceStore(context.Context, *GoodsStoreInfo) (*GoodsStoreInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReduceStore not implemented")
}
func (UnimplementedStoreServer) BatchReduceStore(context.Context, *GoodsListStore) (*GoodsListStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchReduceStore not implemented")
}
func (UnimplementedStoreServer) RollbackStore(context.Context, *GoodsListStore) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackStore not implemented")
}
func (UnimplementedStoreServer) mustEmbedUnimplementedStoreServer() {}

// UnsafeStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServer will
// result in compilation errors.
type UnsafeStoreServer interface {
	mustEmbedUnimplementedStoreServer()
}

func RegisterStoreServer(s grpc.ServiceRegistrar, srv StoreServer) {
	s.RegisterService(&Store_ServiceDesc, srv)
}

func _Store_SetStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsStoreInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).SetStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Store_SetStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).SetStore(ctx, req.(*GoodsStoreInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsStoreInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Store_GetStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetStore(ctx, req.(*GoodsStoreInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_BatchGetStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsListStore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).BatchGetStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Store_BatchGetStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).BatchGetStore(ctx, req.(*GoodsListStore))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_ReduceStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsStoreInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).ReduceStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Store_ReduceStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).ReduceStore(ctx, req.(*GoodsStoreInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_BatchReduceStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsListStore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).BatchReduceStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Store_BatchReduceStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).BatchReduceStore(ctx, req.(*GoodsListStore))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_RollbackStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsListStore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).RollbackStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Store_RollbackStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).RollbackStore(ctx, req.(*GoodsListStore))
	}
	return interceptor(ctx, in, info, handler)
}

// Store_ServiceDesc is the grpc.ServiceDesc for Store service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Store_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Store",
	HandlerType: (*StoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetStore",
			Handler:    _Store_SetStore_Handler,
		},
		{
			MethodName: "GetStore",
			Handler:    _Store_GetStore_Handler,
		},
		{
			MethodName: "BatchGetStore",
			Handler:    _Store_BatchGetStore_Handler,
		},
		{
			MethodName: "ReduceStore",
			Handler:    _Store_ReduceStore_Handler,
		},
		{
			MethodName: "BatchReduceStore",
			Handler:    _Store_BatchReduceStore_Handler,
		},
		{
			MethodName: "RollbackStore",
			Handler:    _Store_RollbackStore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "store.proto",
}
